// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum OrderEventStatus {
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCEL
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  defaultShippingAddress Int?
  defaultBillingAddress  Int?

  // Refer between other table
  addresses Address[]
  cartItem  CartItem[]
  Order     Order[]

  @@map("users")
}

model Address {
  id        Int      @id @default(autoincrement())
  lineOne   String
  lineTwo   String?
  city      String
  country   String
  pincode   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationship between other table
  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  @@map("addresses")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String   @db.Text
  price       Decimal
  tags        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  cartItem     CartItem[]
  orderProduct OrderProduct[]

  @@map("products")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationship between other table
  userId    Int     @map("user_id")
  user      User    @relation(fields: [userId], references: [id])
  productId Int     @map("product_id")
  product   Product @relation(fields: [productId], references: [id])

  @@map("cart_items")
}

model Order {
  id        Int      @id @default(autoincrement())
  netAmount Decimal
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationship between other table
  userId       Int            @map("user_id")
  user         User           @relation(fields: [userId], references: [id])
  orderProduct OrderProduct[]
  orderEvent   OrderEvent[]

  @@map("orders")
}

model OrderProduct {
  id        Int      @id @default(autoincrement())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationship between other table
  orderId   Int     @map("order_id")
  order     Order   @relation(fields: [orderId], references: [id])
  productId Int     @map("product_id")
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_products")
}

model OrderEvent {
  id        Int      @id @default(autoincrement())
  status  OrderEventStatus  @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationship between other table
  orderId Int   @map("order_id")
  order   Order @relation(fields: [orderId], references: [id])

  @@map("order_events")
}
